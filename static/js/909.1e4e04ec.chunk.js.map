{"version":3,"file":"static/js/909.1e4e04ec.chunk.js","mappings":";mNAiDIA,WA3CEC,EAAmB,SAACC,EAC1BC,EAAWC,EAAUC,GAGnB,IAMIC,EACAC,EAPEC,EAAeC,EAAgBP,GACjC,CACAQ,UAAWL,EAAKK,QAChBC,UAAWN,EAAKM,WAEdN,EAAKK,QAYX,OATIR,EAAoC,iCACtCI,EAAM,kCACNC,EAAS,uCAGTD,EAAM,mBACNC,EAAS,uBAEXL,EAAGI,GAAKH,EAAWC,EAAUI,GACtB,WACLN,EAAGK,GAAQJ,EAAWC,EAAUI,EAClC,CACF,EACMC,EAAkB,SAACG,GACvB,QAAkBC,IAAdb,EACF,IACE,IAAMK,EAAOS,OAAOC,eAAe,CAAC,EAAG,UAAW,CAChDC,IAAK,WACHhB,GAAY,CACd,IAEFY,EAAKX,iBAAiB,YAAY,WAElC,GAAGI,EACL,CACA,MAAOY,GACLjB,GAAY,CACd,CAEF,QAASA,CACX,EAuHMkB,EAAc,SAACN,GACnB,OAAOA,aAAgBO,SAAWP,EAAOA,EAAKQ,aAChD,EAoDMC,EAAgB,SAACC,GACrB,IAAIC,GAAiB,EACjBC,GAAgB,EAChBC,GAAgB,EAChBC,GAAe,EACbC,EAAcb,OAAOc,OAAO,CAAEC,eAAe,EAAOC,UAAW,IAAKC,gBAAiB,EAAGpB,SAAS,EAAMqB,SAAU,GAAIC,UAAW,IAAMX,GACtIY,EAAWP,EAAYO,SACvBC,EAAcR,EAAYQ,YAC1BC,EAAUT,EAAYS,QACtBC,EAAQV,EAAYU,MACpBC,EAAcX,EAAYW,YAC1BC,EAASZ,EAAYY,OACrBN,EAAYN,EAAYM,UACxBtB,EAAUgB,EAAYhB,QACtB6B,EAAcb,EAAYa,YAC1BC,EAAS,CACbC,KAAM,MACNC,OAAQ,EACRC,OAAQ,EACRC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,OAAQ,EACRC,YAAa,EACbC,WAAOxC,EACPyC,UAAMzC,GAEF0C,EAhFoB,SAACzB,EAAW0B,EAAQxB,GAC9C,IAAMyB,EAAUzB,GAAY0B,KAAKC,GAAK,KAChCC,EAAuB,MAAd9B,EACT+B,EAAYH,KAAKI,IAAIL,GACrBxB,EAAYuB,EAASA,EACvBb,EAAS,EACTC,EAAS,EACTmB,GAAQ,EACRC,EAAQ,EACZ,MAAO,CACLC,MAAK,SAACC,EAAGC,GACPxB,EAASuB,EACTtB,EAASuB,EACTH,EAAQ,EACRD,GAAQ,CACV,EACAK,OAAM,SAACF,EAAGC,GACR,IAAKJ,EACH,OAAO,EAET,IAAMb,EAASgB,EAAIvB,EACbQ,EAASgB,EAAIvB,EACbyB,EAAWnB,EAASA,EAASC,EAASA,EAC5C,GAAIkB,EAAWpC,EACb,OAAO,EAET,IAAMqC,EAAaZ,KAAKa,KAAKF,GACvBG,GAAUZ,EAASV,EAASC,GAAUmB,EAW5C,OATEN,EADEQ,EAASX,EACH,EAEDW,GAAUX,GACR,EAGD,EAEVE,GAAQ,GACD,CACT,EACAU,UAAS,WACP,OAAiB,IAAVT,CACT,EACAU,aAAY,WACV,OAAOV,CACT,EAEJ,CAiCcW,CAAoBhD,EAAYG,UAAWH,EAAYM,UAAWN,EAAYK,UACpF4C,EAAUC,EAAAA,EAAmBxD,cAAc,CAC/CyD,KAAMxD,EAAOyD,YACbC,SAAU1D,EAAOS,gBACjBF,cAAeP,EAAOO,gBAiDlBoD,EAAa,WAGZ1D,IAGLG,GAAe,EACXa,GACFA,EAAOE,GAEX,EACMyC,EAAkB,WACtB,QAAKN,EAAQlE,YAGba,GAAiB,EACjBE,GAAgB,EAOhBgB,EAAOE,OAASF,EAAOK,SACvBL,EAAOG,OAASH,EAAOM,SACvBN,EAAOI,UAAYJ,EAAOW,YACtBjB,EACFA,EAAYM,GAAQ0C,KAAKC,GAGzBA,KAEK,EACT,EASMA,EAAc,WACd5C,GAToB,WACxB,GAAwB,qBAAb6C,SAA0B,CACnC,IAAMC,EAAgBD,SAASC,eACT,OAAlBA,QAA4C,IAAlBA,OAA2B,EAASA,EAAcC,OAC9ED,EAAcC,MAElB,CACF,CAGIC,GAEEpD,GACFA,EAAQK,GAEVhB,GAAgB,CAClB,EACMgE,EAAQ,WACZlE,GAAiB,EACjBC,GAAgB,EAChBE,GAAe,EACfD,GAAgB,EAChBmD,EAAQc,SACV,EAEMC,EAAY,SAACC,GACjB,IAAMC,EAAiBtE,EACjBuE,EAAmBrE,EACzBgE,IACKK,IAGLC,EAAgBtD,EAAQmD,GAEpBC,EACExD,GACFA,EAAMI,GAKNH,GACFA,EAAYG,GAEhB,EACMuD,EA1UoB,SAAC9F,EAAI+F,EAAaC,EAAaP,EAAWQ,GACpE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAiB,EACfC,EAAmB,SAAChB,GACxBe,EAAiBE,KAAKC,MAZP,IAaVb,EAAYL,MAGZS,GAAeH,IAClBG,EAAcpG,EAAiBC,EAAI,YAAagG,EAAaC,IAW1DG,IACHA,EAAarG,EAAiB2F,EAAGmB,OAAQ,WAAYC,EAAgBb,IAElEI,IACHA,EAAgBtG,EAAiB2F,EAAGmB,OAAQ,cAAeC,EAAgBb,IAE/E,EACMc,EAAkB,SAACrB,GACnBe,EAAiBE,KAAKC,OAGrBb,EAAYL,MAGZa,GAAeP,IAClBO,EAAcxG,EAAiBiB,EAAYhB,GAAK,YAAagG,EAAaC,IAEvEO,IACHA,EAAYzG,EAAiBiB,EAAYhB,GAAK,UAAWgH,EAAef,IAE5E,EACMa,EAAiB,SAACpB,GACtBuB,IACIxB,GACFA,EAAUC,EAEd,EACMsB,EAAgB,SAACtB,GACrBwB,IACIzB,GACFA,EAAUC,EAEd,EACMuB,EAAY,WACZd,GACFA,IAEEC,GACFA,IAEEC,GACFA,IAEFF,EAAcC,EAAaC,OAAgB1F,CAC7C,EACMuG,EAAY,WACZX,GACFA,IAEEC,GACFA,IAEFD,EAAcC,OAAY7F,CAC5B,EACMwG,EAAO,WACXF,IACAC,GACF,EACME,EAAS,WAAUC,UAAAC,OAAA,QAAA3G,IAAA0G,UAAA,KAAAA,UAAA,IAEjBnB,GACFA,IAEEI,GACFA,IAEFJ,EAAeI,OAAe3F,EAC9BwG,MAGKjB,IACHA,EAAenG,EAAiBC,EAAI,aAAc0G,EAAkBT,IAEjEK,IACHA,EAAevG,EAAiBC,EAAI,YAAa+G,EAAiBd,IAGxE,EAKA,MAAO,CACLmB,OAAAA,EACAD,KAAAA,EACAI,QAPc,WACdH,GAAO,GACP3B,EAAYO,EAAcD,OAAcpF,CAC1C,EAMF,CAyNwB6G,CAAoB/F,EAAYzB,IA9HlC,SAAC0F,GACnB,IAAM+B,EAAYb,EAAIlB,GACtB,QAAIpE,IAAkBC,KAGtBmG,EAAahC,EAAInD,GACjBA,EAAOE,OAASF,EAAOK,SACvBL,EAAOG,OAASH,EAAOM,SACvBN,EAAOI,UAAYJ,EAAOW,YAAcuE,EACxClF,EAAOO,UAAYP,EAAOQ,UAAYR,EAAOS,OAAST,EAAOU,OAAS,EACtEV,EAAOY,MAAQuC,IAEX1D,IAAiC,IAArBA,EAASO,MAIzBmC,EAAQc,YAEHd,EAAQX,UAGbzC,GAAgB,EACE,IAAdS,EACKiD,KAET3B,EAAIU,MAAMxB,EAAOE,OAAQF,EAAOG,SACzB,KACT,IACoB,SAACgD,GAGfrE,GACGG,GAAgBD,IACnBC,GAAe,EACfqE,EAAgBtD,EAAQmD,GACxBiC,sBAAsB5C,KAK1Bc,EAAgBtD,EAAQmD,GACpBrC,EAAIa,OAAO3B,EAAOK,SAAUL,EAAOM,YAChCQ,EAAIkB,aAAgBS,KACvB4C,KAGN,GAgFoFnC,EAAW,CAC7FjF,SAAS,EACTC,QAAAA,IAEImH,EAAe,WACnBrC,IACAO,EAAcqB,OACV/E,GACFA,EAAYG,EAEhB,EACA,MAAO,CACL6E,OAAM,WAAgB,IAAfA,IAAMC,UAAAC,OAAA,QAAA3G,IAAA0G,UAAA,KAAAA,UAAA,GACND,IACC/F,GACFoE,OAAU9E,GAEZ4E,KAEFO,EAAcsB,OAAOA,EACvB,EACAG,QAAO,WACL7C,EAAQ6C,UACRzB,EAAcyB,SAChB,EAEJ,EACM1B,EAAkB,SAACtD,EAAQmD,GAC/B,GAAKA,EAAL,CAGA,IAAMmC,EAAQtF,EAAOK,SACfkF,EAAQvF,EAAOM,SACfkF,EAAQxF,EAAOW,YACrBwE,EAAahC,EAAInD,GACjB,IAAMK,EAAWL,EAAOK,SAClBC,EAAWN,EAAOM,SAElBmF,GADazF,EAAOW,YAAc0D,EAAIlB,IACdqC,EAC9B,GAAIC,EAAY,GAAKA,EAAY,IAAK,CACpC,IAAMlF,GAAaF,EAAWiF,GAASG,EACjCjF,GAAaF,EAAWiF,GAASE,EACvCzF,EAAOO,UAAwB,GAAZA,EAAqC,GAAnBP,EAAOO,UAC5CP,EAAOQ,UAAwB,GAAZA,EAAqC,GAAnBR,EAAOQ,SAC9C,CACAR,EAAOS,OAASJ,EAAWL,EAAOE,OAClCF,EAAOU,OAASJ,EAAWN,EAAOG,OAClCH,EAAOY,MAAQuC,CAjBf,CAkBF,EACMgC,EAAe,SAAChC,EAAInD,GAGxB,IAAIyB,EAAI,EACJC,EAAI,EACR,GAAIyB,EAAI,CACN,IAAMuC,EAAiBvC,EAAGuC,eAC1B,GAAIA,GAAkBA,EAAeX,OAAS,EAAG,CAC/C,IAAMY,EAAQD,EAAe,GAC7BjE,EAAIkE,EAAMC,QACVlE,EAAIiE,EAAME,OACZ,WACsBzH,IAAb+E,EAAG2C,QACVrE,EAAI0B,EAAG2C,MACPpE,EAAIyB,EAAG4C,MAEX,CACA/F,EAAOK,SAAWoB,EAClBzB,EAAOM,SAAWoB,CACpB,EACM2C,EAAM,SAAClB,GACX,OAAOA,EAAG+B,WAAad,KAAKC,KAC9B","sources":["../node_modules/@ionic/core/components/index2.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { G as GESTURE_CONTROLLER } from './gesture-controller.js';\nexport { G as GESTURE_CONTROLLER } from './gesture-controller.js';\n\nconst addEventListener = (el, // TODO(FW-2832): type\neventName, callback, opts) => {\n  // use event listener options when supported\n  // otherwise it's just a boolean for the \"capture\" arg\n  const listenerOpts = supportsPassive(el)\n    ? {\n      capture: !!opts.capture,\n      passive: !!opts.passive,\n    }\n    : !!opts.capture;\n  let add;\n  let remove;\n  if (el['__zone_symbol__addEventListener']) {\n    add = '__zone_symbol__addEventListener';\n    remove = '__zone_symbol__removeEventListener';\n  }\n  else {\n    add = 'addEventListener';\n    remove = 'removeEventListener';\n  }\n  el[add](eventName, callback, listenerOpts);\n  return () => {\n    el[remove](eventName, callback, listenerOpts);\n  };\n};\nconst supportsPassive = (node) => {\n  if (_sPassive === undefined) {\n    try {\n      const opts = Object.defineProperty({}, 'passive', {\n        get: () => {\n          _sPassive = true;\n        },\n      });\n      node.addEventListener('optsTest', () => {\n        return;\n      }, opts);\n    }\n    catch (e) {\n      _sPassive = false;\n    }\n  }\n  return !!_sPassive;\n};\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\n// TODO(FW-2832): types\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n  let rmTouchStart;\n  let rmTouchMove;\n  let rmTouchEnd;\n  let rmTouchCancel;\n  let rmMouseStart;\n  let rmMouseMove;\n  let rmMouseUp;\n  let lastTouchEvent = 0;\n  const handleTouchStart = (ev) => {\n    lastTouchEvent = Date.now() + MOUSE_WAIT;\n    if (!pointerDown(ev)) {\n      return;\n    }\n    if (!rmTouchMove && pointerMove) {\n      rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n    }\n    /**\n     * Events are dispatched on the element that is tapped and bubble up to\n     * the reference element in the gesture. In the event that the element this\n     * event was first dispatched on is removed from the DOM, the event will no\n     * longer bubble up to our reference element. This leaves the gesture in an\n     * unusable state. To account for this, the touchend and touchcancel listeners\n     * should be added to the event target so that they still fire even if the target\n     * is removed from the DOM.\n     */\n    if (!rmTouchEnd) {\n      rmTouchEnd = addEventListener(ev.target, 'touchend', handleTouchEnd, options);\n    }\n    if (!rmTouchCancel) {\n      rmTouchCancel = addEventListener(ev.target, 'touchcancel', handleTouchEnd, options);\n    }\n  };\n  const handleMouseDown = (ev) => {\n    if (lastTouchEvent > Date.now()) {\n      return;\n    }\n    if (!pointerDown(ev)) {\n      return;\n    }\n    if (!rmMouseMove && pointerMove) {\n      rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n    }\n    if (!rmMouseUp) {\n      rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n    }\n  };\n  const handleTouchEnd = (ev) => {\n    stopTouch();\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n  const handleMouseUp = (ev) => {\n    stopMouse();\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n  const stopTouch = () => {\n    if (rmTouchMove) {\n      rmTouchMove();\n    }\n    if (rmTouchEnd) {\n      rmTouchEnd();\n    }\n    if (rmTouchCancel) {\n      rmTouchCancel();\n    }\n    rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n  };\n  const stopMouse = () => {\n    if (rmMouseMove) {\n      rmMouseMove();\n    }\n    if (rmMouseUp) {\n      rmMouseUp();\n    }\n    rmMouseMove = rmMouseUp = undefined;\n  };\n  const stop = () => {\n    stopTouch();\n    stopMouse();\n  };\n  const enable = (isEnabled = true) => {\n    if (!isEnabled) {\n      if (rmTouchStart) {\n        rmTouchStart();\n      }\n      if (rmMouseStart) {\n        rmMouseStart();\n      }\n      rmTouchStart = rmMouseStart = undefined;\n      stop();\n    }\n    else {\n      if (!rmTouchStart) {\n        rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n      }\n      if (!rmMouseStart) {\n        rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n      }\n    }\n  };\n  const destroy = () => {\n    enable(false);\n    pointerUp = pointerMove = pointerDown = undefined;\n  };\n  return {\n    enable,\n    stop,\n    destroy,\n  };\n};\nconst getDocument = (node) => {\n  return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n  const radians = maxAngle * (Math.PI / 180);\n  const isDirX = direction === 'x';\n  const maxCosine = Math.cos(radians);\n  const threshold = thresh * thresh;\n  let startX = 0;\n  let startY = 0;\n  let dirty = false;\n  let isPan = 0;\n  return {\n    start(x, y) {\n      startX = x;\n      startY = y;\n      isPan = 0;\n      dirty = true;\n    },\n    detect(x, y) {\n      if (!dirty) {\n        return false;\n      }\n      const deltaX = x - startX;\n      const deltaY = y - startY;\n      const distance = deltaX * deltaX + deltaY * deltaY;\n      if (distance < threshold) {\n        return false;\n      }\n      const hypotenuse = Math.sqrt(distance);\n      const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n      if (cosine > maxCosine) {\n        isPan = 1;\n      }\n      else if (cosine < -maxCosine) {\n        isPan = -1;\n      }\n      else {\n        isPan = 0;\n      }\n      dirty = false;\n      return true;\n    },\n    isGesture() {\n      return isPan !== 0;\n    },\n    getDirection() {\n      return isPan;\n    },\n  };\n};\n\n// TODO(FW-2832): types\nconst createGesture = (config) => {\n  let hasCapturedPan = false;\n  let hasStartedPan = false;\n  let hasFiredStart = true;\n  let isMoveQueued = false;\n  const finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\n  const canStart = finalConfig.canStart;\n  const onWillStart = finalConfig.onWillStart;\n  const onStart = finalConfig.onStart;\n  const onEnd = finalConfig.onEnd;\n  const notCaptured = finalConfig.notCaptured;\n  const onMove = finalConfig.onMove;\n  const threshold = finalConfig.threshold;\n  const passive = finalConfig.passive;\n  const blurOnStart = finalConfig.blurOnStart;\n  const detail = {\n    type: 'pan',\n    startX: 0,\n    startY: 0,\n    startTime: 0,\n    currentX: 0,\n    currentY: 0,\n    velocityX: 0,\n    velocityY: 0,\n    deltaX: 0,\n    deltaY: 0,\n    currentTime: 0,\n    event: undefined,\n    data: undefined,\n  };\n  const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n  const gesture = GESTURE_CONTROLLER.createGesture({\n    name: config.gestureName,\n    priority: config.gesturePriority,\n    disableScroll: config.disableScroll,\n  });\n  const pointerDown = (ev) => {\n    const timeStamp = now(ev);\n    if (hasStartedPan || !hasFiredStart) {\n      return false;\n    }\n    updateDetail(ev, detail);\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime = timeStamp;\n    detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n    detail.event = ev;\n    // Check if gesture can start\n    if (canStart && canStart(detail) === false) {\n      return false;\n    }\n    // Release fallback\n    gesture.release();\n    // Start gesture\n    if (!gesture.start()) {\n      return false;\n    }\n    hasStartedPan = true;\n    if (threshold === 0) {\n      return tryToCapturePan();\n    }\n    pan.start(detail.startX, detail.startY);\n    return true;\n  };\n  const pointerMove = (ev) => {\n    // fast path, if gesture is currently captured\n    // do minimum job to get user-land even dispatched\n    if (hasCapturedPan) {\n      if (!isMoveQueued && hasFiredStart) {\n        isMoveQueued = true;\n        calcGestureData(detail, ev);\n        requestAnimationFrame(fireOnMove);\n      }\n      return;\n    }\n    // gesture is currently being detected\n    calcGestureData(detail, ev);\n    if (pan.detect(detail.currentX, detail.currentY)) {\n      if (!pan.isGesture() || !tryToCapturePan()) {\n        abortGesture();\n      }\n    }\n  };\n  const fireOnMove = () => {\n    // Since fireOnMove is called inside a RAF, onEnd() might be called,\n    // we must double check hasCapturedPan\n    if (!hasCapturedPan) {\n      return;\n    }\n    isMoveQueued = false;\n    if (onMove) {\n      onMove(detail);\n    }\n  };\n  const tryToCapturePan = () => {\n    if (!gesture.capture()) {\n      return false;\n    }\n    hasCapturedPan = true;\n    hasFiredStart = false;\n    // reset start position since the real user-land event starts here\n    // If the pan detector threshold is big, not resetting the start position\n    // will cause a jump in the animation equal to the detector threshold.\n    // the array of positions used to calculate the gesture velocity does not\n    // need to be cleaned, more points in the positions array always results in a\n    // more accurate value of the velocity.\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime;\n    if (onWillStart) {\n      onWillStart(detail).then(fireOnStart);\n    }\n    else {\n      fireOnStart();\n    }\n    return true;\n  };\n  const blurActiveElement = () => {\n    if (typeof document !== 'undefined') {\n      const activeElement = document.activeElement;\n      if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.blur) {\n        activeElement.blur();\n      }\n    }\n  };\n  const fireOnStart = () => {\n    if (blurOnStart) {\n      blurActiveElement();\n    }\n    if (onStart) {\n      onStart(detail);\n    }\n    hasFiredStart = true;\n  };\n  const reset = () => {\n    hasCapturedPan = false;\n    hasStartedPan = false;\n    isMoveQueued = false;\n    hasFiredStart = true;\n    gesture.release();\n  };\n  // END *************************\n  const pointerUp = (ev) => {\n    const tmpHasCaptured = hasCapturedPan;\n    const tmpHasFiredStart = hasFiredStart;\n    reset();\n    if (!tmpHasFiredStart) {\n      return;\n    }\n    calcGestureData(detail, ev);\n    // Try to capture press\n    if (tmpHasCaptured) {\n      if (onEnd) {\n        onEnd(detail);\n      }\n      return;\n    }\n    // Not captured any event\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n  const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n    capture: false,\n    passive,\n  });\n  const abortGesture = () => {\n    reset();\n    pointerEvents.stop();\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n  return {\n    enable(enable = true) {\n      if (!enable) {\n        if (hasCapturedPan) {\n          pointerUp(undefined);\n        }\n        reset();\n      }\n      pointerEvents.enable(enable);\n    },\n    destroy() {\n      gesture.destroy();\n      pointerEvents.destroy();\n    },\n  };\n};\nconst calcGestureData = (detail, ev) => {\n  if (!ev) {\n    return;\n  }\n  const prevX = detail.currentX;\n  const prevY = detail.currentY;\n  const prevT = detail.currentTime;\n  updateDetail(ev, detail);\n  const currentX = detail.currentX;\n  const currentY = detail.currentY;\n  const timestamp = (detail.currentTime = now(ev));\n  const timeDelta = timestamp - prevT;\n  if (timeDelta > 0 && timeDelta < 100) {\n    const velocityX = (currentX - prevX) / timeDelta;\n    const velocityY = (currentY - prevY) / timeDelta;\n    detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n    detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n  }\n  detail.deltaX = currentX - detail.startX;\n  detail.deltaY = currentY - detail.startY;\n  detail.event = ev;\n};\nconst updateDetail = (ev, detail) => {\n  // get X coordinates for either a mouse click\n  // or a touch depending on the given event\n  let x = 0;\n  let y = 0;\n  if (ev) {\n    const changedTouches = ev.changedTouches;\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0];\n      x = touch.clientX;\n      y = touch.clientY;\n    }\n    else if (ev.pageX !== undefined) {\n      x = ev.pageX;\n      y = ev.pageY;\n    }\n  }\n  detail.currentX = x;\n  detail.currentY = y;\n};\nconst now = (ev) => {\n  return ev.timeStamp || Date.now();\n};\n\nexport { createGesture };\n"],"names":["_sPassive","addEventListener","el","eventName","callback","opts","add","remove","listenerOpts","supportsPassive","capture","passive","node","undefined","Object","defineProperty","get","e","getDocument","Document","ownerDocument","createGesture","config","hasCapturedPan","hasStartedPan","hasFiredStart","isMoveQueued","finalConfig","assign","disableScroll","direction","gesturePriority","maxAngle","threshold","canStart","onWillStart","onStart","onEnd","notCaptured","onMove","blurOnStart","detail","type","startX","startY","startTime","currentX","currentY","velocityX","velocityY","deltaX","deltaY","currentTime","event","data","pan","thresh","radians","Math","PI","isDirX","maxCosine","cos","dirty","isPan","start","x","y","detect","distance","hypotenuse","sqrt","cosine","isGesture","getDirection","createPanRecognizer","gesture","GESTURE_CONTROLLER","name","gestureName","priority","fireOnMove","tryToCapturePan","then","fireOnStart","document","activeElement","blur","blurActiveElement","reset","release","pointerUp","ev","tmpHasCaptured","tmpHasFiredStart","calcGestureData","pointerEvents","pointerDown","pointerMove","options","rmTouchStart","rmTouchMove","rmTouchEnd","rmTouchCancel","rmMouseStart","rmMouseMove","rmMouseUp","lastTouchEvent","handleTouchStart","Date","now","target","handleTouchEnd","handleMouseDown","handleMouseUp","stopTouch","stopMouse","stop","enable","arguments","length","destroy","createPointerEvents","timeStamp","updateDetail","requestAnimationFrame","abortGesture","prevX","prevY","prevT","timeDelta","changedTouches","touch","clientX","clientY","pageX","pageY"],"sourceRoot":""}